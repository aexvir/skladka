// Package paste provides the core data structures and functionality for managing text pastes
// in the system. It defines the Paste type which represents a single paste entry with
// its metadata such as title, content, syntax highlighting, tags, expiration, and visibility.
//
// A paste can be:
//   - Public or private (controlled via the Public field)
//   - Time-limited (via the optional Expiration field)
//   - Syntax highlighted (via the optional Syntax field)
//   - Tagged for organization (via the Tags field)
//
// The Reference field is a unique identifier generated by the storage layer when
// creating a new paste. It is used to retrieve the paste later.
//
// Example usage:
//
//	paste := &paste.Paste{
//		Title:   "Example Go Code",
//		Content: "fmt.Println(\"Hello, World!\")",
//		Syntax:  ptr("go"),
//		Tags:    []string{"example", "golang"},
//		Public:  true,
//	}
//
// Field validation rules:
//   - Title: Optional, but if provided must not be empty
//   - Content: Required, must not be empty
//   - Syntax: Optional, but if provided must be a valid syntax highlighter identifier
//   - Tags: Optional, but if provided each tag must be non-empty
//   - Expiration: Optional, but if provided must be in the future
//   - Public: Required, determines paste visibility
//   - Reference: Read-only, set by storage layer
package paste
