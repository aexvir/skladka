// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pastes.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaste = `-- name: CreatePaste :one
insert into pastes
(reference, title, content, syntax, tags, expiration, public)
values ($1, $2, $3, $4, $5, $6, $7)
returning id
`

type CreatePasteParams struct {
	Reference  string           `db:"reference" json:"reference"`
	Title      string           `db:"title" json:"title"`
	Content    string           `db:"content" json:"content"`
	Syntax     pgtype.Text      `db:"syntax" json:"syntax"`
	Tags       []string         `db:"tags" json:"tags"`
	Expiration pgtype.Timestamp `db:"expiration" json:"expiration"`
	Public     bool             `db:"public" json:"public"`
}

// CreatePaste
//
//	insert into pastes
//	(reference, title, content, syntax, tags, expiration, public)
//	values ($1, $2, $3, $4, $5, $6, $7)
//	returning id
func (q *Queries) CreatePaste(ctx context.Context, arg CreatePasteParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPaste,
		arg.Reference,
		arg.Title,
		arg.Content,
		arg.Syntax,
		arg.Tags,
		arg.Expiration,
		arg.Public,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPasteByID = `-- name: GetPasteByID :one
select id, reference, title, content, syntax, tags, expiration, public, created_at, updated_at, deleted_at, views
from pastes
where id = $1
    and deleted_at is null
`

// GetPasteByID
//
//	select id, reference, title, content, syntax, tags, expiration, public, created_at, updated_at, deleted_at, views
//	from pastes
//	where id = $1
//	    and deleted_at is null
func (q *Queries) GetPasteByID(ctx context.Context, id int64) (Paste, error) {
	row := q.db.QueryRow(ctx, getPasteByID, id)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Reference,
		&i.Title,
		&i.Content,
		&i.Syntax,
		&i.Tags,
		&i.Expiration,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Views,
	)
	return i, err
}

const getPasteByReference = `-- name: GetPasteByReference :one
update pastes
set views = views + 1
where reference = $1
    and deleted_at is null
returning id, reference, title, content, syntax, tags, expiration, public, created_at, updated_at, deleted_at, views
`

// GetPasteByReference
//
//	update pastes
//	set views = views + 1
//	where reference = $1
//	    and deleted_at is null
//	returning id, reference, title, content, syntax, tags, expiration, public, created_at, updated_at, deleted_at, views
func (q *Queries) GetPasteByReference(ctx context.Context, reference string) (Paste, error) {
	row := q.db.QueryRow(ctx, getPasteByReference, reference)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Reference,
		&i.Title,
		&i.Content,
		&i.Syntax,
		&i.Tags,
		&i.Expiration,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Views,
	)
	return i, err
}

const listPublicPastes = `-- name: ListPublicPastes :many
select id, reference, title, content, syntax, tags, expiration, public, created_at, updated_at, deleted_at, views
from pastes
where public = true
order by created_at desc
`

// ListPublicPastes
//
//	select id, reference, title, content, syntax, tags, expiration, public, created_at, updated_at, deleted_at, views
//	from pastes
//	where public = true
//	order by created_at desc
func (q *Queries) ListPublicPastes(ctx context.Context) ([]Paste, error) {
	rows, err := q.db.Query(ctx, listPublicPastes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paste
	for rows.Next() {
		var i Paste
		if err := rows.Scan(
			&i.ID,
			&i.Reference,
			&i.Title,
			&i.Content,
			&i.Syntax,
			&i.Tags,
			&i.Expiration,
			&i.Public,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Views,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
