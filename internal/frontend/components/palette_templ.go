// Code generated by templ - DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func CommandPalette() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"command-palette\" class=\"hidden fixed inset-0 z-50 overflow-y-auto\" aria-labelledby=\"command-palette-title\" role=\"dialog\" aria-modal=\"true\"><div class=\"flex min-h-screen items-start justify-center px-4 pt-16 sm:px-6 sm:pt-32\"><div class=\"w-full max-w-2xl transform rounded-lg bg-main shadow-2xl transition-all\"><div class=\"p-4\"><input type=\"text\" id=\"command-palette-input\" class=\"w-full bg-muted text-main rounded px-4 py-2 focus:outline-none focus:ring-2 focus:border-accent\" placeholder=\"type to search...\"><div id=\"command-palette-links\" class=\"mt-4 space-y-2\"><a href=\"/documents\" class=\"block p-2 text-white hover:bg-gray-700 rounded transition-colors\">üìÑ Documents</a> <a href=\"/settings\" class=\"block p-2 text-white hover:bg-gray-700 rounded transition-colors\">‚öôÔ∏è Settings</a> <a href=\"/help\" class=\"block p-2 text-white hover:bg-gray-700 rounded transition-colors\">‚ùì Help</a></div></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = initCommandPalette().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func initCommandPalette() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_initCommandPalette_81fc`,
		Function: `function __templ_initCommandPalette_81fc(){const palette = document.getElementById('command-palette')
    const input = document.getElementById('command-palette-input')
    const links = document.getElementById('command-palette-links')
    let selectedIndex = 0

    document.addEventListener('keydown', (e) => {
        // Toggle palette visibility with cmd+k or ctrl+k
        if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
            e.preventDefault()
            if (palette.classList.contains('hidden')) {
                palette.classList.remove('hidden')
                input.focus()
            } else {
                palette.classList.add('hidden')
            }
        }

        if (!palette.classList.contains('hidden')) {
            const items = links.getElementsByTagName('a')

            if (e.key === 'ArrowDown') {
                e.preventDefault()
                items[selectedIndex].classList.remove('bg-gray-700')
                selectedIndex = (selectedIndex + 1) % items.length
                items[selectedIndex].classList.add('bg-gray-700')
            } else if (e.key === 'ArrowUp') {
                e.preventDefault()
                items[selectedIndex].classList.remove('bg-gray-700')
                selectedIndex = (selectedIndex - 1 + items.length) % items.length
                items[selectedIndex].classList.add('bg-gray-700')
            } else if (e.key === 'Enter') {
                e.preventDefault()
                items[selectedIndex].click()
            } else if (e.key === 'Escape') {
                e.preventDefault()
                palette.classList.add('hidden')
            }
        }
    })

    input.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase()
        const items = links.getElementsByTagName('a')

        Array.from(items).forEach((item) => {
            const text = item.textContent.toLowerCase()
            if (text.includes(query)) {
                item.classList.remove('hidden')
            } else {
                item.classList.add('hidden')
            }
        })

        // Reset selection
        Array.from(items).forEach(item => item.classList.remove('bg-gray-700'))
        selectedIndex = 0
        const visibleItems = Array.from(items).filter(item => !item.classList.contains('hidden'))
        if (visibleItems.length > 0) {
            visibleItems[0].classList.add('bg-gray-700')
        }
    })
}`,
		Call:       templ.SafeScript(`__templ_initCommandPalette_81fc`),
		CallInline: templ.SafeScriptInline(`__templ_initCommandPalette_81fc`),
	}
}

var _ = templruntime.GeneratedTemplate
