package components

templ InputLabel(name string, icon templ.Component) {
	if name != "" {
		<label class="text-sm text-main flex flex-row gap-2 items-center">
			if icon != nil {
				@icon
			}
			{ name }
		</label>
	}
}

templ TextInput(id, label, placeholder string, icon templ.Component) {
	<div class="space-y-1">
		@InputLabel(label, icon)
		<input
			id={ id }
			name={ id }
			type="text"
			placeholder={ placeholder }
			class="h-10 w-full bg-muted text-muted border-main border rounded px-3 py-2 focus:outline-none focus:border-accent"
		/>
	</div>
}

templ PasswordInput(id, label, placeholder string) {
	<input
		id={ id }
		name={ id }
		type="password"
		class="h-10 w-full bg-muted text-muted border-main border rounded px-3 py-2 focus:outline-none focus:border-accent"
	/>
}

templ SelectInput(id, label string, icon templ.Component, options ...string) {
	<div class="space-y-1">
		@InputLabel(label, icon)
		<select id={ id } name={ id } class="h-10 w-full bg-muted text-muted border-main border rounded px-3 py-2 focus:outline-none focus:border-accent">
		for _, option := range options {
			<option value={ option }>{ option }</option>
		}
		</select>
	</div>
}

templ TagsInput(id, label string, icon templ.Component) {
	<div class="space-y-1">
		@InputLabel(label, icon)
		<div
			id={ id }
			class="min-h-10 w-full bg-muted text-muted border-main border rounded px-3 py-2 focus:outline-none focus:border-accent"
		>
		<div class="tags-container flex flex-wrap items-center gap-1">
			<input
				type="text"
				class="bg-transparent outline-none text-base min-w-[50px] flex-1"
			/>
		</div>
			<input type="hidden" name={ id } />
		</div>
		@initTagsInput(id)
	</div>
}

script initTagsInput(inputId string) {
    document.addEventListener('DOMContentLoaded', () => {
        const wrapper = document.getElementById(inputId);
        const tagsContainer = wrapper.querySelector('.tags-container');
        const input = wrapper.querySelector('input[type="text"]');
        let tags = [];
        let hiddenInput = wrapper.querySelector('input[type="hidden"]');

        const updateHiddenInput = () => {
            hiddenInput.value = tags.join(',');
        };

        const updatePlaceholder = () => {
            input.placeholder = tags.length === 0 ? "type and press enter or comma" : "";
        };

        const createTagElement = (tag) => {
            const tagElement = document.createElement('span');
            tagElement.className = 'inline-flex items-center border-main text-base px-2 py-0.25 rounded';
            tagElement.innerHTML = `
                ${tag}
                <button type="button" class="ml-1.5 text-gray-400 hover:text-gray-200">&times;</button>
            `;
            tagElement.querySelector('button').addEventListener('click', (e) => {
                e.preventDefault();
                tags = tags.filter(t => t !== tag);
                tagElement.remove();
                updateHiddenInput();
                updatePlaceholder();
                input.focus();
            });
            return tagElement;
        };

        input.addEventListener('keydown', (e) => {
            if ((e.key === 'Enter' || e.key === ',' || e.key === ' ') && !e.shiftKey) {
                e.preventDefault();
                const tag = input.value.trim().replace(',', '');
                if (tag && !tags.includes(tag)) {
                    tags.push(tag);
                    tagsContainer.insertBefore(createTagElement(tag), input);
                    input.value = '';
                    updateHiddenInput();
                    updatePlaceholder();
                }
            } else if (e.key === 'Backspace' && input.value === '' && tags.length > 0) {
                const lastTag = tags[tags.length - 1];
                tags.pop();
                tagsContainer.removeChild(tagsContainer.lastChild.previousSibling);
                updateHiddenInput();
                updatePlaceholder();
            }
        });

        // Handle paste
        input.addEventListener('paste', (e) => {
            e.preventDefault();
            const pastedText = e.clipboardData.getData('text');
            const newTags = pastedText.split(/[,\n]/).map(t => t.trim()).filter(t => t && !tags.includes(t));

            newTags.forEach(tag => {
                tags.push(tag);
                tagsContainer.insertBefore(createTagElement(tag), input);
            });
            updateHiddenInput();
            updatePlaceholder();
        });

        // Handle focus
        input.addEventListener('focus', () => {
            wrapper.classList.add('border-accent');
        });

        input.addEventListener('blur', () => {
            wrapper.classList.remove('border-accent');
            // Add any remaining input as a tag
            const tag = input.value.trim();
            if (tag && !tags.includes(tag)) {
                tags.push(tag);
                tagsContainer.insertBefore(createTagElement(tag), input);
                input.value = '';
                updateHiddenInput();
                updatePlaceholder();
            }
        });
    });
}
